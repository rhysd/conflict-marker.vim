let s:lines = [
            \ '<<<<<<< HEAD',
            \ 'ourselves1',
            \ '=======',
            \ 'themselves1',
            \ '>>>>>>> 8374eabc232',
            \ ]

lockvar s:lines

let s:lines_diff3 = [
            \ '<<<<<<< HEAD',
            \ 'ourselves1',
            \ '||||||| merged common ancestors',
            \ 'common ancestors1',
            \ '=======',
            \ 'themselves1',
            \ '>>>>>>> 8374eabc232',
            \ ]

lockvar s:lines_diff3

Describe matchit
    Before
        new
        for l in range(1, len(s:lines))
            call setline(l, s:lines[l-1])
        endfor
        doautocmd BufReadPost
    End

    After
        close!
    End

    It defines b:match_words
        Assert Exists('b:match_words')
        Assert Match(b:match_words, ',^<<<<<<<:^|||||||\\+:^=======$:^>>>>>>>')
    End

    It can jump within a conflict marker
        normal! gg
        normal %
        Assert Equals(line('.'), 3)
        normal %
        Assert Equals(line('.'), 5)
        normal %
        Assert Equals(line('.'), 1)
        normal %
        Assert Equals(line('.'), 3)
    End
End

Describe matchit with diff3
    Before
        new
        for l in range(1, len(s:lines_diff3))
            call setline(l, s:lines_diff3[l-1])
        endfor
        doautocmd BufReadPost
    End

    After
        close!
    End

    It can jump within a conflict marker
        normal! gg
        normal %
        Assert Equals(line('.'), 3)
        normal %
        Assert Equals(line('.'), 5)
        normal %
        Assert Equals(line('.'), 7)
        normal %
        Assert Equals(line('.'), 1)
    End
End
